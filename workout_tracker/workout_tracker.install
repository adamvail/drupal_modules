<?php

/**
* Implementation of of hook_install().
*/

function workout_tracker_install(){
     // Create Tables
//    drupal_install_schema('workout_pr');
}

function workout_tracker_schema(){
	// At the moment have one table for all the users.
	// This doesn't scale so we'll have to figure out 
	// how to have a table for each user most likely

	$schema['workout_pr'] = array(
		'description' => t('Current PR'),
		'fields' => array(
			'athlete_uid' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'size' => 'normal',
				'description' => t('The UID for user who performed this PR'),	
			),
			'movement' => array(
					'type' => 'varchar',
					'length' => '255',
					'not null' => TRUE,
					'description' => t('The movement'),
			),
			'pr' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'size' => 'normal',
				'description' => t('Current PR for specified movement'),	
			),
			'date' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('The date that this workout was created'),	
			),
		),
		'indexes' => array(
			'athelete_uid' => array('athlete_uid'),
			'movement' => array('movement'),
		),
	);

	$schema['workout_tracker_strength'] = array(
		'description' => t('Strength workout results'),
		'fields' => array(
			'athlete_uid' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'size' => 'normal',
				'description' => t('The UID for user who performed this workout'),	
			),
			'wid' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('The workout id'),	
			),
			'sid' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('The strength id, group movements in workout together'),	
			),
			'num_performed' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('Which time this workout has been performed, since workouts can be redone'),	
			),
			'date' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('Date the workout was performed'),	
			),
			'set_num' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'size' => 'normal',
				'description' => t('The set for this movement'),	
			),
			'work' => array(
				'type' => 'varchar',
				'length' => 255,
				'description' => t('Weight/count for this movement on this set'),
			),
			'fail' => array(
				'type' => 'varchar',
				'length' => '255',
				'description' => t('The rep that was failed on'),	
			),
			'fail_movement' => array(
				'type' => 'varchar',
				'length' => 255,
				'description' => t('The movement that was failed on. Only used for complex movements'),	
			),
			'fail_movement_rep' => array(
				'type' => 'varchar',
				'length' => 255,
				'description' => t('The rep that was failed on from the movement. Only used for complex movements'),	
			),
		),
		'indexes' => array(
			'athlete_uid' => array('athlete_uid'),
			'wid' => array('wid'),
			'sid' => array('sid'),
			'num_performed' => array('num_performed'),
		),
	);

	$schema['workout_tracker_conditioning'] = array(
		'description' => t('Conditioning workout results'),
		'fields' => array(
			'athlete_uid' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'size' => 'normal',
				'description' => t('The UID for user who performed this workout'),	
			),
			'wid' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('The workout id'),	
			),
			'cid' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('The conditioning id, group movements in workout together'),	
			),
			'num_performed' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('Which time this workout has been performed, since workouts can be redone'),	
			),
			'date' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('Date the workout was performed'),	
			),
			'time' => array(
				'type' => 'varchar',
				'length' => 5,
				'description' => t('Time it took to complete all work (Round for time)'),
			),
			'amrap_rounds' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'size' => 'normal',
				'description' => t('Number of total rounds of work done (AMRAP)'),
			),
			'amrap_reps' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'size' => 'normal',
				'description' => t('Number of total reps of work done (AMRAP)'),
			),
			'movement' => array(
				'type' => 'varchar',
				'length' => 255,
				'description' => t('Name of movement in interval'),
			),
			'interval' => array(
				'type' => 'varchar',
				'length' => 255,
				'description' => t('Comma delimited list of reps from each interval for this movement'),
			),
		),
		'indexes' => array(
			'athlete_uid' => array('athlete_uid'),
			'wid' => array('wid'),
			'cid' => array('cid'),
			'sid' => array('sid'),
			'num_performed' => array('num_performed'),
		),
	);

	$schema['workout_tracker_strength_notes'] = array(
		'description' => 'Notes that are attached to a strength workout',
		'fields' => array(
			'wid' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('The workout id, group workouts from the same form together'),	
			),
			'strength_id' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('The strength id, group movements in workout together'),	
			),
			'num_performed' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('Which time this workout has been performed, since workouts can be redone'),	
			),
			'notes' => array(
				'type' => 'text',
				'size' => 'medium',
				'description' => t('Notes about the strength workout'),
			),	
		),
		'indexes' => array(
			'wid' => array('wid'),
			'sid' => array('sid'),
			'num_performed' => array('num_performed'),
		),
	);

	$schema['workout_tracker_conditioning_notes'] = array(
		'description' => 'Notes that are attached to a conditioning workout',
		'fields' => array(
			'wid' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('The workout id, group workouts from the same form together'),	
			),
			'conditioning_id' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('The conditioning id, group movements in workout together'),	
			),
			'num_performed' => array(
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'size' => 'normal',
				'description' => t('Which time this workout has been performed, since workouts can be redone'),	
			),
			'notes' => array(
				'type' => 'text',
				'size' => 'medium',
				'description' => t('Notes about the conditioning workout'),
			),	
		),
		'indexes' => array(
			'wid' => array('wid'),
			'num_performed' => array('num_performed'),
		),
	);
	return $schema;
}

function workout_tracker_uninstall() {
 // $result = db_query("SELECT * FROM {workout_builder_strength}");
 // foreach ($result as $data) {
//    db_query("DELETE FROM {variable} WHERE name = :name", array(':name' => 'example_', $data->nid));
//  }
}





